// Global.h
#ifndef Global_H
#define Global_H
#include <Windows.h>

//函数声明								
//**************************************************************************								
//ReadPEFile:将文件读取到缓冲区								
//参数说明：								
//lpszFile 文件路径								
//pFileBuffer 缓冲区指针								
//返回值说明：								
//读取失败返回0  否则返回实际读取的大小								
//**************************************************************************								
DWORD ReadPEFile(IN const char* lpszFile, OUT void** pFileBuffer);
//**************************************************************************								
//回收内存函数				
//**************************************************************************
void recycleMemory(void** pFileBuffer, void** pImageBuffer, void** pNewBuffer);
//**************************************************************************								
//打印PE头信息		
// lpszFile:文件路径				
//**************************************************************************
void TestPrintPEHeader(const char* lpszFile);
//**************************************************************************								
//CopyFileBufferToImageBuffer:将文件从FileBuffer复制到ImageBuffer								
//参数说明：								
//pFileBuffer  FileBuffer指针								
//pImageBuffer ImageBuffer指针								
//返回值说明：								
//读取失败返回0  否则返回复制的大小								
//**************************************************************************								
DWORD CopyFileBufferToImageBuffer(IN const void* pFileBuffer, OUT void** pImageBuffer);
//**************************************************************************								
//CopyImageBufferToNewBuffer:将ImageBuffer中的数据复制到新的缓冲区								
//参数说明：								
//pImageBuffer ImageBuffer指针								
//pNewBuffer NewBuffer指针								
//返回值说明：								
//读取失败返回0  否则返回复制的大小								
//**************************************************************************								
DWORD CopyImageBufferToNewBuffer(IN const void* pImageBuffer, OUT void** pNewBuffer);
//**************************************************************************								
//MemeryTOFile:将内存中的数据复制到文件								
//参数说明：								
//pMemBuffer 内存中数据的指针								
//size 要复制的大小								
//lpszFile 要存储的文件路径								
//返回值说明：								
//读取失败返回0  否则返回复制的大小								
//**************************************************************************								
BOOL MemoryTOFile(IN const void* pMemBuffer, IN size_t size, OUT const char* lpszFile);
//**************************************************************************								
//RvaToFileOffset:将内存偏移转换为文件偏移								
//参数说明：								
//pFileBuffer FileBuffer指针								
//dwRva RVA的值								
//返回值说明：								
//返回转换后的FOA的值  如果失败返回0								
//**************************************************************************								
DWORD RvaToFileOffset(IN const void* pFileBuffer, IN DWORD dwRva);
//**************************************************************************
//模仿PE加载过程
//**************************************************************************
void TestPELoader();
//**************************************************************************
//在第一个节空白区添加代码
//**************************************************************************
void TestAddCodeInCodeSec();
//**************************************************************************
//在任意节空白区添加代码
//**************************************************************************
void TestAddCodeInDataSec(WORD sectionIndex);
//**************************************************************************
//在自己新增的节里添加代码
//**************************************************************************
void TestAddCodeInNewSec();
//**************************************************************************
//返回x按照y对齐后的大小
//**************************************************************************
int Align(int x, int y);
//**************************************************************************
//扩大最后一个节
//**************************************************************************
void TestAddCodeInExpSec(size_t Size);
//**************************************************************************
//合并所有节
//**************************************************************************
void TestMergeSec();
//**************************************************************************
//输出目录表各信息
//**************************************************************************
void TestPrintDirectory();
//**************************************************************************
//输出导出表各信息
//**************************************************************************
void TestPrintExportTable();
//**************************************************************************
//在dll中通过名字查找函数地址
//**************************************************************************
DWORD GetFunctionAddrByName(IN const void* pFileBuffer, IN const char* functionName);
//**************************************************************************
//在dll中通过导出序号查找函数地址
//**************************************************************************
DWORD GetFunctionAddrByOrdinals(IN const void* pFileBuffer, IN DWORD ordinal);
//**************************************************************************
//测试查找函数的功能函数
//**************************************************************************
void TestGetFunctionAddr();
//**************************************************************************
// 打印所有重定位信息
//**************************************************************************
void TestPrintRelocation();
//**************************************************************************
// 移动导出表
//**************************************************************************
void moveExportTable();
//**************************************************************************
// 移动重定位表
//**************************************************************************
void moveRelocationTable();
//**************************************************************************
// 辅助函数，判断某个区域是否全为0
//**************************************************************************
BOOL IsAllZero(BYTE* data, size_t size);
//**************************************************************************
// 打印导入表所有信息
//**************************************************************************
void TestPrintImportTable();
//**************************************************************************
// 打印绑定导入表所有信息
//**************************************************************************
void TestPrintBoundImportTable();
//**************************************************************************
// 实现导入表注入
//**************************************************************************
void injectByImportTable();
#endif // Global_H